#include <iostream>  

// Node structure representing each element in the linked list
struct Node {
    int data;       // Data held by the node
    Node* next;     // Pointer to the next node in the list

    // Constructor to initialize a node with a value
    Node(int value) : data(value), next(nullptr) {}
};

// Class for managing the singly linked list
class SinglyLinkedList {
private:
    Node* head;  // Pointer to the first node in the list

public:
    // Constructor initializes an empty list
    SinglyLinkedList() : head(nullptr) {}

    // Function to insert a node at a specific index
    int insert(int data, int index) {
        Node* newNode = new Node(data);  // Create a new node

        if (index == 0) {  // Special case: insert at the head
            newNode->next = head;
            head = newNode;
            return 0;  // Success
        }

        Node* current = head;
        // Traverse to the node before the insertion point
        for (int i = 0; i < index - 1; ++i) {
            if (current == nullptr) return -1;  // Index out of bounds
            current = current->next;
        }

        if (current == nullptr) return -1;  // Index out of bounds

        // Insert the new node in the list
        newNode->next = current->next;
        current->next = newNode;

        return 0;  // Success
    }

    // Function to delete a node at a specific index
    int deleteNode(int index) {
        if (head == nullptr) return -1;  // List is empty

        if (index == 0) {  // Special case: delete the head
            Node* temp = head;
            head = head->next;
            delete temp;
            return 0;  // Success
        }

        Node* current = head;
        // Traverse to the node before the one to be deleted
        for (int i = 0; i < index - 1; ++i) {
            if (current == nullptr || current->next == nullptr) return -1;  // Index out of bounds
            current = current->next;
        }

        Node* temp = current->next;  // Node to be deleted
        if (temp == nullptr) return -1;  // Index out of bounds

        current->next = temp->next;  // Bypass the node to be deleted
        delete temp;

        return 0;  // Success
    }

    // Function to display the list contents
    void display() const {
        Node* current = head;
        while (current != nullptr) {
            std::cout << current->data << " ";  // Print node data
            current = current->next;
        }
        std::cout << std::endl;
    }

    // Destructor to clean up the list and free memory
    ~SinglyLinkedList() {
        Node* current = head;
        while (current != nullptr) {
            Node* next = current->next;
            delete current;
            current = next;
        }
    }
};

// Main function to demonstrate the linked list operations
int main() {
    SinglyLinkedList list;

    list.insert(10, 0);  // Insert 10 at index 0
    list.insert(20, 1);  // Insert 20 at index 1
    list.insert(30, 2);  // Insert 30 at index 2
    list.display();  // Output: 10 20 30

    list.deleteNode(1);  // Delete the node at index 1
    list.display();  // Output: 10 30

    list.insert(40, 1);  // Insert 40 at index 1
    list.display();  // Output: 10 40 30

    return 0;
}
