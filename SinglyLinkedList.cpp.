#include <iostream>

// Define the structure of a Node in the singly linked list
struct Node {
    int data;      // The data stored in the node
    Node* next;    // Pointer to the next node in the list
};

// Class representing a singly linked list
class SinglyLinkedList {
private:
    Node* head;    // Pointer to the first node (head) of the list

public:
    // Constructor to initialize an empty list
    SinglyLinkedList() : head(nullptr) {}

    // Function to insert a new node with 'data' at the given 'index'
    int insert(int data, int index) {
        // Create a new node and assign the data
        Node* newNode = new Node();
        newNode->data = data;
        newNode->next = nullptr;

        // Check if the index is invalid (negative)
        if (index < 0) {
            return -1; // Return -1 to indicate failure due to invalid index
        }

        // Special case: Insertion at the head of the list
        if (index == 0) {
            newNode->next = head; // New node points to the current head
            head = newNode;       // Update head to the new node
            return 0; // Return 0 to indicate success
        }

        // Traverse the list to find the node after which we want to insert
        Node* current = head;
        int currentIndex = 0;

        // Continue traversing until we reach the node just before the desired index
        while (current != nullptr && currentIndex < index - 1) {
            current = current->next;
            currentIndex++;
        }

        // If we reach the end of the list before the desired index, the index is out of bounds
        if (current == nullptr) {
            return -1; // Return -1 to indicate failure due to index out of bounds
        }

        // Insert the new node by adjusting pointers
        newNode->next = current->next; // New node points to the node after 'current'
        current->next = newNode;       // 'current' now points to the new node

        return 0; // Return 0 to indicate success
    }

    // Function to delete the node at the given 'index'
    int deleteNode(int index) {
        // Check if the list is empty or if the index is invalid
        if (head == nullptr || index < 0) {
            return -1; // Return -1 to indicate failure due to empty list or invalid index
        }

        // Special case: Deletion at the head of the list
        if (index == 0) {
            Node* temp = head;    // Temporarily store the head node
            head = head->next;    // Update head to point to the next node
            delete temp;          // Delete the old head node
            return 0; // Return 0 to indicate success
        }

        // Traverse the list to find the node just before the one we want to delete
        Node* current = head;
        int currentIndex = 0;

        // Continue traversing until we reach the node just before the desired index
        while (current != nullptr && currentIndex < index - 1) {
            current = current->next;
            currentIndex++;
        }

        // If we reach the end of the list before the desired index, the index is out of bounds
        if (current == nullptr || current->next == nullptr) {
            return -1; // Return -1 to indicate failure due to index out of bounds
        }

        // Adjust pointers to delete the node
        Node* temp = current->next; // Temporarily store the node to be deleted
        current->next = temp->next; // 'current' now skips over 'temp' to the next node
        delete temp;                // Delete the node

        return 0; // Return 0 to indicate success
    }

    // Function to display the contents of the list
    void display() const {
        Node* current = head; // Start at the head of the list
        while (current != nullptr) { // Traverse until the end of the list
            std::cout << current->data << " -> "; // Print the data of each node
            current = current->next;             // Move to the next node
        }
        std::cout << "NULL" << std::endl; // Indicate the end of the list
    }
};

// Main function to test the SinglyLinkedList class
int main() {
    SinglyLinkedList list;

    // Insert nodes into the list
    list.insert(10, 0); // Insert 10 at index 0 (beginning)
    list.insert(20, 1); // Insert 20 at index 1 (end)
    list.insert(30, 2); // Insert 30 at index 2 (end)
    list.insert(15, 1); // Insert 15 at index 1 (middle)

    // Display the list after insertions
    std::cout << "List after insertions: ";
    list.display();

    // Delete a node from the list
    list.deleteNode(2); // Delete the node at index 2

    // Display the list after deletion
    std::cout << "List after deletion: ";
    list.display();

    return 0;
}


