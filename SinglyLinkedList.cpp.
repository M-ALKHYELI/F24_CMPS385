#include <iostream>

struct Node {
    int data;
    Node* next;

    Node(int value) : data(value), next(nullptr) {}
};

class SinglyLinkedList {
private:
    Node* head;

public:
    SinglyLinkedList() : head(nullptr) {}

    int insert(int data, int index) {
        Node* newNode = new Node(data);

        if (index == 0) {
            newNode->next = head;
            head = newNode;
            return 0;
        }

        Node* current = head;
        for (int i = 0; i < index - 1; ++i) {
            if (current == nullptr) return -1;  // index out of bounds
            current = current->next;
        }

        if (current == nullptr) return -1;  // index out of bounds

        newNode->next = current->next;
        current->next = newNode;

        return 0;  // success
    }

    int deleteNode(int index) {
        if (head == nullptr) return -1;  // list is empty

        if (index == 0) {
            Node* temp = head;
            head = head->next;
            delete temp;
            return 0;  // success
        }

        Node* current = head;
        for (int i = 0; i < index - 1; ++i) {
            if (current == nullptr || current->next == nullptr) return -1;  // index out of bounds
            current = current->next;
        }

        Node* temp = current->next;
        if (temp == nullptr) return -1;  // index out of bounds

        current->next = temp->next;
        delete temp;

        return 0;  // success
    }

    void display() const {
        Node* current = head;
        while (current != nullptr) {
            std::cout << current->data << " ";
            current = current->next;
        }
        std::cout << std::endl;
    }

    ~SinglyLinkedList() {
        Node* current = head;
        while (current != nullptr) {
            Node* next = current->next;
            delete current;
            current = next;
        }
    }
};

int main() {
    SinglyLinkedList list;

    list.insert(10, 0); // Insert 10 at index 0
    list.insert(20, 1); // Insert 20 at index 1
    list.insert(30, 2); // Insert 30 at index 2
    list.display(); // Output: 10 20 30

    list.deleteNode(1); // Delete the node at index 1
    list.display(); // Output: 10 30

    list.insert(40, 1); // Insert 40 at index 1
    list.display(); // Output: 10 40 30

    return 0;
}
